{
    "React - Import render": {
        "prefix": "rrImRender",
        "body": [
            "import { render } from 'react-dom';"
        ],
        "description": "Import render() from ReactDOM"
    },
    "React - Import ReactDOM": {
        "prefix": "rrImReactDOM",
        "body": [
            "import ReactDOM from 'react-dom';"
        ],
        "description": "Import ReactDOM from ReactDOM"
    },
    "React - Import ReactDOM and render()": {
        "prefix": "rrImReactDOMRender",
        "body": [
            "import ReactDOM, { render } from 'react-dom';"
        ],
        "description": "Import ReactDOM, render() from ReactDOM"
    },
    "ReactDOM - Render method": {
        "prefix": "rrRenderDom",
        "body": [
            "ReactDOM.render(",
            "\t<${1:ComponentName}/>,",
            "\tdocument.getElementById('${2:root}')",
            ")"
        ],
        "description": "Create ReactDOM.render()"
    },
    "React - Render method": {
        "prefix": "rrRender",
        "body": [
            "render() {",
            "\treturn (",
            "\t\t<div>",
            "\t\t\t$1",
            "\t\t</div>",
            "\t)",
            "}"
        ],
        "description": "Create only render()"
    },
    "React - Class component": {
        "prefix": "rrClassComponent",
        "body": [
            "class ${1:ClassName} extends Component {",
            "\t$2",
            "\t",
            "\trender(){",
            "\t\treturn(",
            "\t\t\t<div>",
            "\t\t\t\t$3",
            "\t\t\t</div>",
            "\t\t)",
            "\t}",
            "}"
        ],
        "description": "Create class component"
    },
    "React - Full class component": {
        "prefix": "rrClassComponentFull",
        "body": [
            "class ${1:ClassName} extends Component {",
            "\tconstructor(props) {",
            "\t\tsuper(props);",
            "\t\tthis.state = { $2 };",
            "\t}",
            "\t",
            "\t//Do stuff",
            "\t$3",
            "\t",
            "\trender(){",
            "\t\treturn(",
            "\t\t\t<div>",
            "\t\t\t\t$4",
            "\t\t\t</div>",
            "\t\t)",
            "\t}",
            "}"
        ],
        "description": "Create full class component"
    },
    "React - Constructor": {
        "prefix": "rrconstructor",
        "body": [
            "constructor(props) {",
            "\tsuper(props);",
            "\tthis.state = { $1 };",
            "}$2"
        ],
        "description": "Create constructor()"
    },
    "React - componentDidMount()": {
        "prefix": "rrcomponentDidMount",
        "body": [
            "componentDidMount() {",
            "\t$1",
            "}"
        ],
        "description": "Create componentDidMount()"
    },
    "React - componentDidUpdate()": {
        "prefix": "rrcomponentDidUpdate",
        "body": [
            "componentDidUpdate(${1:prevProps},${2: prevState},${3: snapshot}) {",
            "\t$4",
            "}"
        ],
        "description": "Create componentDidUpdate()"
    },
    "React - componentWillUnmount()": {
        "prefix": "rrcomponentWillUnmount",
        "body": [
            "componentWillUnmount() {",
            "\t$1",
            "}"
        ],
        "description": "Create componentWillUnmount()"
    },
    "React - shouldComponentUpdate()": {
        "prefix": "rrshouldComponentUpdate",
        "body": [
            "shouldComponentUpdate(${1:nextProps},${2: nextState}) {",
            "\t$3",
            "}"
        ],
        "description": "Create shouldComponentUpdate()"
    },
    "React - getSnapshotBeforeUpdate()": {
        "prefix": "rrgetSnapshotBeforeUpdate",
        "body": [
            "getSnapshotBeforeUpdate(${1:prevProps},${2: prevState}) {",
            "\t$3",
            "}"
        ],
        "description": "Create getSnapshotBeforeUpdate()"
    },
    "React - componentDidCatch()": {
        "prefix": "rrcomponentDidCatch",
        "body": [
            "componentDidCatch(${1:error},${2: info}) {",
            "\t$3",
            "}"
        ],
        "description": "Create componentDidCatch()"
    },
    "React - mapDispatchToProps": {
        "prefix": "rrmapDispatchToProps",
        "body": [
            "const mapDispatchToProps = {",
            "\t$1",
            "}"
        ],
        "description": "Create mapDispatchToProps()"
    },
    "React - mapStateToProps": {
        "prefix": "rrmapStateToProps",
        "body": [
            "const mapStateToProps = (state) => {",
            "\treturn ({",
            "\t\t$1",
            "\t})",
            "}"
        ],
        "description": "Create mapStateToProps()"
    },
    "React-Redux - Create store": {
		"prefix": "rrcreateStore",
		"body": [
            "const ${1:store} = createStore(${2:rootReducer},${3: [preloadedState]},${4: [enhancer]});"
		],
		"description": "React-Redux - Create store"
    },
    "React-Redux - Combine reducer": {
		"prefix": "rrCombineReducers",
		"body": [
            "const ${1:rootReducer} = combineReducers({${2:reducer1}, ${3:reducer2\\}});"
		],
		"description": "React-Redux - Using combineReducers()"
    },
    "React-Redux - Reducer": {
		"prefix": "rrReducer",
		"body": [
            "export const ${1:reducerName} = (${2:state = {\\}}, ${3:action}) => {",
                "\tswitch (${4:action.type}) {",
                    "\t\tcase '${5:ACTION_TYPE}':",
                    "\t\t\treturn ${6:newState}",
                    "\t\tdefault:",
                    "\t\t\treturn state",
                "\t}",
            "}"
		],
		"description": "React-Redux - Create a basic reducer"
    },
    "React-Redux - Export connected component": {
		"prefix": "rrconnect",
		"body": [
            "export const ${1:ComponentName} = connect(${2:mapStateToProps}, ${3:mapDispatchToProps})(${4:CreatedComponent});"
		],
		"description": "React-Redux - Export connected component"
    },
    "Method with ES7 syntax": {
        "prefix": "rrMethod",
        "body": [
            "${1:methodName} = (${2:params}) => {",
            "\t$3",
            "}"
        ],
        "description": "Create method with ES7 syntax"
    },  
    "Node.js module exports": {
        "prefix": "mep",
        "body": [
            "module.exports = {",
            "\t$1",
            "}"
        ],
        "description": "Declare multiple module.exports"
    },
    "JavaScript method handleClick() with ES7 syntax": {
        "prefix": "handleClick",
        "body": [
            "${1:handleClick} = (${2:e}) => {",
            "\t${3:e.preventDefault();}",
            "\t$4",
            "}"
        ],
        "description": "Create handleClick() method with ES7 syntax"
    },
    "JavaScript event.preventDefault": {
        "prefix": "e.preventDefault",
        "body": [
            "e.preventDefault();"
        ],
        "description": "Completion for e.preventDefault()"
    },
    "Console - console.log()": {
		"prefix": "cslog",
		"body": [
            "console.log($1)"
		],
		"description": "Create console.log()"
    },
    "React-pretence-router import Route": {
        "prefix": "rprImportRouter",
        "body": [
            "import { Route, routerReducers as router } from 'react-pretence-router';"
        ],
        "description": "Import Route component and router reducers for react-pretence-router"
    },
    "React-pretence-router import Link": {
        "prefix": "rprImportLink",
        "body": [
            "import { Link } from 'react-pretence-router';"
        ],
        "description": "Import Link component for react-pretence-router"
    },
    "React-pretence-router Route component": {
        "prefix": "rprRouteComponent",
        "body": [
            "<Route path={'$1'} component={$2}/>"
        ],
        "description": "Create Route component that using react-pretence-router"
    },
    "React-pretence-router Link component": {
        "prefix": "rprLinkComponent",
        "body": [
            "<Link to={'$1'} name={'$2'} css={'$3'}/>"
        ],
        "description": "Create Link component that using react-pretence-router"
    }
}