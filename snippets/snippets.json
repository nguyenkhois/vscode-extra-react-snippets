{
    "React Hooks import": {
        "prefix": "rrImpHooks",
        "body": "import React, { useState, useEffect } from 'react';",
        "description": "Import basic React Hooks"
    },
    "React function": {
        "prefix": "rrFunction",
        "body": [
            "const ${1:FunctionName} = (${2:parameters}) => {",
            "\t$3",
            "};"
        ],
        "description": "Create a function with ES7 syntax"
    },
    "React component": {
		"prefix": "rrComponent",
		"body": [
			"import React, { useState, useEffect } from 'react';",
			"",
			"const ${1:ComponentName} = () => {",
			"",
			"\treturn (",
			"\t\t<div>",
			"\t\t\t${1:ComponentName}",
			"\t\t</div>",
			"\t);",
			"};",
			"",
			"export default ${1:ComponentName};"
		],
		"description": "Create a simple component with React Hooks"
	},
    "React - Stateless function component": {
        "prefix": "rrStatelessFunctionComponent",
        "body": [
          "const ${1:FunctionName} = ($2) => {",
          "\treturn ( $0 );",
          "}",
          " ",
          "export default ${1:FunctionName};"
        ],
        "description": "Create a stateless function component"
    },
    "React - Return an HTML element": {
        "prefix": "rrReturnElement",
        "body": [
            "return (",
            "\t<${1:TagName}>",
            "\t\t$2",
            "\t</${1:TagName}>",
            ");"
        ],
        "description": "Return an HTML element"
    },
    "Import from module": {
        "prefix": "imp",
        "body": "import { $1 } from '$2';",
        "description": "Import live bindings from another module"
    },
    "Import default": {
        "prefix": "impd",
        "body": "import $1 from '$2';",
        "description": "Import default from another module"
    },
    "Export default": {
		"prefix": "expd",
		"body": ["export default {", "\t$1", "}"],
		"description": "Declare export default for bindings"
	},
    "Node.js - Module exports": {
        "scope": "javascript",
        "prefix": "mep",
        "body": [
            "module.exports = {",
            "\t$1",
            "};"
        ],
        "description": "Declare module.exports statement"
    },
    "JavaScript event.preventDefault": {
        "prefix": "eventpr",
        "body": [
            "event.preventDefault();"
        ],
        "description": "Completion for event.preventDefault()"
    },
    "JavaScript event.stopPropagation": {
        "prefix": "eventst",
        "body": [
            "event.stopPropagation();"
        ],
        "description": "Completion for event.stopPropagation()"
    },
    "JavaScript - Action function": {
        "prefix": "handleAction",
        "body": [
            "const ${1:handleAction} = (${2:event}) => {",
            "\t${3:event.preventDefault();}",
            "\t$4",
            "};"
        ],
        "description": "Create a function to handle an action"
    },
    "JavaScript - A Promise function":{
        "prefix":"jsPromise",
        "body": [
            "function ${1:name}(${2:params}) {",
            "\treturn new Promise((resolve, reject) => {",
            "\t\t$3",
            "\t});",
            "}"
        ],
        "description": "Create a Promise function"
    },
    "JavaScript - Return a Promise function":{
        "prefix":"jsReturnPromise",
        "body": [
            "return new Promise((resolve, reject) => {",
            "\t$3",
            "});"
        ],
        "description": "Return a Promise function"
    },
    "JavaScript - Fetch by using GET":{
        "prefix":"jsFetchGET",
        "body": [
            "const fetchUrl = '$1';",
            "fetch(fetchUrl)",
                "\t.then((response) => response.json())",
                "\t.then((data) => console.log(data))",
                "\t.catch((error) => console.log(error));",
            ""
        ],
        "description": "Create a simple fetch by using GET method"
    },
    "JavaScript - Fetch by using options":{
        "prefix":"jsFetch",
        "body": [
            "const fetchUrl = '$1';",
            "fetch(fetchUrl, {",
                "\tmethod: '$2',",
                "\tbody: JSON.stringify(${3:data}),",
                "\theaders: {",
                    "\t\t'Content-Type': 'application/json'",
                    "\t}",
                    "})",
                ".then((response) => response.json())",
                ".then((data) => console.log(data))",
                ".catch((error) => console.log(error));",
            ""
        ],
        "description": "Create a fetch template with options"
    },
    "Console - Print to console": {
		"prefix": "csl",
		"body": "console.log($1);",
		"description": "Log output to console"
	},
    "Console - Display data as a table": {
		"prefix": "cst",
		"body": "console.table($1);",
		"description": "Log data as a table to console"
	},
    "Console - Print warning": {
		"prefix": "csw",
		"body": [
            "console.warn($1);"
		],
		"description": "Log warning to console"
    },
    "Console - Print error": {
		"prefix": "cse",
		"body": [
            "console.error($1);"
		],
		"description": "Log error to console"
    }
}