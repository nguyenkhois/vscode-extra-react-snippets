{
    "React - Import render": {
        "prefix": "rrImRender",
        "body": [
            "import { render } from 'react-dom';"
        ],
        "description": "Import render() from ReactDOM"
    },
    "React - Import ReactDOM": {
        "prefix": "rrImReactDOM",
        "body": [
            "import ReactDOM from 'react-dom';"
        ],
        "description": "Import ReactDOM from ReactDOM"
    },
    "React - Import ReactDOM and render()": {
        "prefix": "rrImReactDOMRender",
        "body": [
            "import ReactDOM, { render } from 'react-dom';"
        ],
        "description": "Import ReactDOM, render() from ReactDOM"
    },
    "ReactDOM - Render method": {
        "prefix": "rrRenderDom",
        "body": [
            "ReactDOM.render(",
            "\t<${1:ComponentName}/>,",
            "\tdocument.getElementById('${2:root}')",
            ");"
        ],
        "description": "Create ReactDOM.render()"
    },
    "React - Render method": {
        "prefix": "rrRender",
        "body": [
            "render() {",
            "\treturn (",
            "\t\t<div>",
            "\t\t\t$1",
            "\t\t</div>",
            "\t);",
            "}"
        ],
        "description": "Create only render() method"
    },
    "React - Return a div": {
        "prefix": "rrReturnDiv",
        "body": [
            "return (",
            "\t<div>",
            "\t\t$1",
            "\t</div>",
            ");"
        ],
        "description": "Return a div ta that is using for render()"
    },
    "React - Class component": {
        "prefix": "rrClassComponent",
        "body": [
            "class ${1:ClassName} extends Component {",
            "\t$2",
            "\t",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t<div>",
            "\t\t\t\t$3",
            "\t\t\t</div>",
            "\t\t);",
            "\t}",
            "}"
        ],
        "description": "Create a class component"
    },
    "React - Full class component": {
        "prefix": "rrClassComponentFull",
        "body": [
            "class ${1:ClassName} extends Component {",
            "\tconstructor(props) {",
            "\t\tsuper(props);",
            "\t\tthis.state = { $2 };",
            "\t}",
            "\t",
            "\t//Do stuff",
            "\t$3",
            "\t",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t<div>",
            "\t\t\t\t$4",
            "\t\t\t</div>",
            "\t\t);",
            "\t}",
            "}"
        ],
        "description": "Create a full class component"
    },
    "React - Stateless function component": {
        "prefix": "rrStatelessFunctionComponent",
        "body": [
          "const ${1:FunctionName} = ($2) => {",
          "\treturn ( $0 );",
          "}",
          " ",
          "export default ${1:FunctionName};"
        ],
        "description": "Create a stateless function component"
      },
    "React - Constructor": {
        "prefix": "rrconstructor",
        "body": [
            "constructor(props) {",
            "\tsuper(props);",
            "\tthis.state = { $1 };",
            "}$2"
        ],
        "description": "Create constructor()"
    },
    "React - componentDidMount()": {
        "prefix": "rrcomponentDidMount",
        "body": [
            "componentDidMount() {",
            "\t$1",
            "}"
        ],
        "description": "Create componentDidMount()"
    },
    "React - componentDidUpdate()": {
        "prefix": "rrcomponentDidUpdate",
        "body": [
            "componentDidUpdate(${1:prevProps},${2: prevState},${3: snapshot}) {",
            "\t$4",
            "}"
        ],
        "description": "Create componentDidUpdate()"
    },
    "React - componentWillUnmount()": {
        "prefix": "rrcomponentWillUnmount",
        "body": [
            "componentWillUnmount() {",
            "\t$1",
            "}"
        ],
        "description": "Create componentWillUnmount()"
    },
    "React - shouldComponentUpdate()": {
        "prefix": "rrshouldComponentUpdate",
        "body": [
            "shouldComponentUpdate(${1:nextProps},${2: nextState}) {",
            "\t$3",
            "}"
        ],
        "description": "Create shouldComponentUpdate()"
    },
    "React - getSnapshotBeforeUpdate()": {
        "prefix": "rrgetSnapshotBeforeUpdate",
        "body": [
            "getSnapshotBeforeUpdate(${1:prevProps},${2: prevState}) {",
            "\t$3",
            "}"
        ],
        "description": "Create getSnapshotBeforeUpdate()"
    },
    "React - componentDidCatch()": {
        "prefix": "rrcomponentDidCatch",
        "body": [
            "componentDidCatch(${1:error},${2: info}) {",
            "\t$3",
            "}"
        ],
        "description": "Create componentDidCatch()"
    },
    "React-Redux - mapDispatchToProps": {
        "prefix": "rrmapDispatchToProps",
        "body": [
            "const mapDispatchToProps = {",
            "\t$1",
            "};"
        ],
        "description": "Create mapDispatchToProps()"
    },
    "React-Redux - mapStateToProps": {
        "prefix": "rrmapStateToProps",
        "body": [
            "const mapStateToProps = (state) => {",
            "\treturn ({",
            "\t\t$1",
            "\t});",
            "};"
        ],
        "description": "Create mapStateToProps()"
    },
    "React-Redux - Create a store": {
		"prefix": "rrcreateStore",
		"body": [
            "const ${1:store} = createStore(${2:rootReducer},${3: [preloadedState]},${4: [enhancer]});"
		],
		"description": "Create a Redux store"
    },
    "React-Redux - Combine reducer": {
		"prefix": "rrCombineReducers",
		"body": [
            "const ${1:rootReducer} = combineReducers({${2:reducer1}, ${3:reducer2\\}});"
		],
		"description": "Using combineReducers()"
    },
    "React-Redux - Reducer template": {
		"prefix": "rrReducer",
		"body": [
            "export const ${1:reducerName} = (${2:state = {\\}}, ${3:action}) => {",
                "\tswitch (${4:action.type}) {",
                    "\t\tcase '${5:ACTION_TYPE}':",
                    "\t\t\treturn ${6:newState}",
                    "\t\tdefault:",
                    "\t\t\treturn state",
                "\t}",
            "}"
		],
		"description": "Create a basic reducer template"
    },
    "React-Redux - Export a connected component": {
		"prefix": "rrconnect",
		"body": [
            "export const ${1:ComponentName} = connect(${2:mapStateToProps}, ${3:mapDispatchToProps})(${4:CreatedComponent});"
		],
		"description": "Export a connected component"
    },
    "React method with ES7 syntax": {
        "prefix": "rrMethod",
        "body": [
            "${1:methodName} = (${2:params}) => {",
            "\t$3",
            "}"
        ],
        "description": "Create method with ES7 syntax"
    },
    "React Hooks - Importing": {
        "prefix": "rrImHooks",
        "body": "import React, { useState, useEffect } from 'react';",
        "description": "Import basic React Hooks"
    },
    "React Hooks - Declaration": {
        "prefix": "rrDeclareHooks",
        "body": "const [${1:stateVariable}, ${2:setState}] = useState(${initialState});",
        "description": "Declare a state value by using React Hooks"
    },
    "Node.js module exports": {
        "prefix": "mep",
        "body": [
            "module.exports = {",
            "\t$1",
            "};"
        ],
        "description": "Declare multiple module.exports"
    },
    "JavaScript - Method handleClick() with ES7 syntax": {
        "prefix": "handleClick",
        "body": [
            "${1:handleClick} = (${2:e}) => {",
            "\t${3:e.preventDefault();}",
            "\t$4",
            "}"
        ],
        "description": "Create a handleClick() method with ES7 syntax"
    },
    "JavaScript event.preventDefault": {
        "prefix": "e.preventDefault",
        "body": [
            "e.preventDefault();"
        ],
        "description": "Completion for event.preventDefault()"
    },
    "JavaScript event.stopPropagation": {
        "prefix": "e.stopPropagation",
        "body": [
            "e.stopPropagation();"
        ],
        "description": "Completion for event.stopPropagation()"
    },
    "JavaScript - A Promise function":{
        "prefix":"jsPromise",
        "body": [
            "function ${1:name}(${2:params}) {",
            "\treturn new Promise((resolve, reject) => {",
            "\t\t$3",
            "\t});",
            "}"
        ],
        "description": "Create a Promise function"
    },
    "JavaScript - Return a Promise function":{
        "prefix":"jsReturnPromise",
        "body": [
            "return new Promise((resolve, reject) => {",
            "\t$3",
            "});"
        ],
        "description": "Return a Promise function"
    },
    "JavaScript - Fetch by using GET":{
        "prefix":"jsFetchGET",
        "body": [
            "const fetchUrl = '$1';",
            "fetch(fetchUrl)",
                "\t.then((response) => response.json())",
                "\t.then((data) => console.log(data))",
                "\t.catch((error) => console.log(error));",
            ""
        ],
        "description": "Create fetch by using GET method"
    },
    "JavaScript - Fetch by using POST or PUT method":{
        "prefix":"jsFetchPOSTorPUT",
        "body": [
            "const fetchUrl = '$1';",
            "fetch(fetchUrl, {",
                "\tmethod: '$2',",
                "\tbody: JSON.stringify(${3:data}),",
                "\theaders: {",
                    "\t\t'Content-Type': 'application/json'",
                    "\t}",
                    "})",
                ".then((response) => response.json())",
                ".then((data) => console.log(data))",
                ".catch((error) => console.log(error));",
            ""
        ],
        "description": "Create a fetch template for POST or PUT method"
    },
    "JavaScript - Fetch by using DELETE method":{
        "prefix":"jsFetchDELETE",
        "body": [
            "const fetchUrl = '$1';",
            "fetch(fetchUrl, {",
                "\tmethod: '${2:DELETE}',",
                "\theaders: {",
                    "\t\t'Content-Type': 'application/json'",
                    "\t}",
                    "})",
                ".then((response) => response.json())",
                ".then((data) => console.log(data))",
                ".catch((error) => console.log(error));",
            ""
        ],
        "description": "Create fetch by using DELETE method"
    },
    "Console - console.log()": {
		"prefix": "cslog",
		"body": [
            "console.log($1)$2"
		],
		"description": "Print to console"
    },
    "Console - console.error()": {
		"prefix": "cserror",
		"body": [
            "console.error($1)$2"
		],
		"description": "Print error to console"
    }
}